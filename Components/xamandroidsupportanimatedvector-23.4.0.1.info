{"Name":"Android Support Library Animated Vector Drawable","Id":2904,"Alias":"xamandroidsupportanimatedvector","Description":"# Animated Vector Drawable Android Support Library\n\n\nThis library adds support for Animated Vector Drawables in older Android API Levels.\n\n\n\n\n## Android Support Libraries\n\nThe Android Support Libraries are a set of code libraries that provide backward-compatible versions of Android framework APIs as well as features that are only available through the library APIs. Each Support Library is backward-compatible to a specific Android API level. This design means that your applications can use the libraries\u0027 features and still be compatible with devices running older versions of Android.\n\nIncluding the Support Libraries in your Android project is considered a best practice for application developers, depending on the range of platform versions your app is targeting and the APIs that it uses. Using the features the libraries provide can help you improve the look of your application, increase performance and broaden the reach of your application to more users. \n\n\n\n","Version":"23.4.0.1","Summary":"Provide backward-compatible versions of Android framework APIs.","QuickStart":"\nThis library adds support for utilizing Vector drawable graphics on devices running Android API Level 11 or higher. \n\n### Target SDK Version \nNOTE: Using this support library requires that your app have its Target Android Version (*targetSdkVersion*) set to Lollipop (5.0 - API Level 21) or higher, or you will have *aapt* related compile errors.  You can still set the Target Framework which your app is compiled against as low as Android 4.0.3 (API Level 15).\n\n\nUsing Animated Vector Drawables\n------\n\nTo use your vector drawable, you should also reference the **AppCompat v7 Support Library** in your app.\n\nYour activity should derive from `AppCompatActivity` so that the `AppCompatImageView` is automatically used at runtime where you have defined `ImageView` types.\n\nHere is an example of an animated vector.  It is created by defining multiple resources.\n\n1. Create a vector image by creating a file `Resources/drawable/vector.xml` with the contents:\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"utf-8\" ?\u003e\n\u003cvector\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:height=\"64dp\"\n  android:width=\"64dp\"\n  android:viewportHeight=\"600\"\n  android:viewportWidth=\"600\" \u003e\n  \u003cgroup\n    android:name=\"rotationGroup\"\n    android:pivotX=\"300.0\"\n    android:pivotY=\"300.0\"\n    android:rotation=\"45.0\" \u003e\n    \u003cpath\n      android:name=\"v\"\n      android:fillColor=\"#000000\"\n      android:pathData=\"M300,70 l 0,-70 70,70 0,0 -70,70z\" /\u003e\n  \u003c/group\u003e\n\u003c/vector\u003e\n\n```\n\n\n\n2. Create a file `Resources/anim/path_morph.xml` with the contents:\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e\n\u003cset\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n  \u003cobjectAnimator\n    android:duration=\"3000\"\n    android:propertyName=\"pathData\"\n    android:valueFrom=\"M300,70 l 0,-70 70,70 0,0   -70,70z\"\n      android:valueTo=\"M300,70 l 0,-70 70,0  0,140 -70,0 z\"\n    android:valueType=\"pathType\"/\u003e\n\u003c/set\u003e\n```\n\n\n3. Create a file `Resources/anim/rotation.xml` with the contents:\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e\n\u003cobjectAnimator\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:duration=\"6000\"\n  android:propertyName=\"rotation\"\n  android:valueFrom=\"0\"\n  android:valueTo=\"360\" /\u003e\n```\n\n\nFinally, create an animated vector drawable file `Resources/anim/avd.xml` to tie the vector and animations together with the contents:\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e\n\u003canimated-vector\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:drawable=\"@drawable/vector\" \u003e\n  \u003ctarget\n    android:name=\"rotationGroup\"\n    android:animation=\"@anim/rotation\" /\u003e\n  \u003ctarget\n    android:name=\"v\"\n    android:animation=\"@anim/path_morph\" /\u003e\n\u003c/animated-vector\u003e\n```\n\nYou can then reference your vector drawable programmatically, or declaratively in your android layout xml.\n\nTo use your vector drawable programmatically:\n\n```csharp\nimageView.SetImageResource (Resource.Drawable.avd);\n```\n\nTo specify the vector in your layout file, use the `app:srcCompat` attribute (be sure to define the `xmlns:app` namespace as well):\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\u003e\n    \u003cImageView\n        app:srcCompat=\"@drawable/avd\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"fill_parent\"\n        android:layout_weight=\"1\"\n        android:id=\"@+id/imageView\" /\u003e\n\u003c/LinearLayout\u003e\n```\n\nFinally, you will need to start the animation from your code:\n\n```csharp\nimageView.Drawable.JavaCast\u003cAndroid.Graphics.Drawables.IAnimatable\u003e ().Start ();\n```\n\n\n**NOTE:** The `Xamarin.Android.Support.Vector.Drawable` nuget package contains a .targets file which appends the argument `--no-version-vectors` to  `AndroidResgenExtraArgs` build property value to ensure the parameter is passed to the `aapt` invocation.\n","Hash":"54134a162d0d1bb2e2bf29b171175a00","TargetPlatforms":["android"],"TrialHash":null}